{"version":3,"sources":["utils/fetchClient.ts","GlobalContetxt.tsx","api/users.ts","api/posts.ts","api/comments.ts","components/PostInfo.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserDetails.tsx","components/UserSelector.tsx","AppPosts.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","GlobalContext","createContext","users","setUsers","comments","setComments","userName","setUserName","posts","setPosts","userId","setUserId","postId","setPostId","isLoadingPosts","setIsLoadingPosts","isVisibleError","setIsVisibleError","isLoadingComments","setIsLoadingComments","isErrorComments","setIsErrorComments","GlobalProvider","children","useState","useEffect","postsService","newPosts","catch","finally","commentsService","newComments","Provider","value","PostInfo","post","useContext","id","title","className","type","classNames","onClick","PostsList","map","Loader","NewCommentForm","nameValue","setNameValue","emailValue","setEmailValue","bodyValue","setBodyValue","isNameError","setIsNameError","isEmailError","setIsEmailError","isBodyError","setIsBodyError","isLoadingButton","setIsLoadingButton","htmlFor","name","placeholder","onChange","event","target","preventDefault","trim","email","newComment","PostDetails","createComment","setCreateComment","currentPost","find","handleDeleteComment","commentId","updatedComments","filter","c","length","comment","href","UserDetails","user","setIsActiveDropdown","UserSelector","isActiveDropdown","role","AppPosts","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd275c7f.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { createContext, useEffect, useState } from 'react';\nimport * as postsService from './api/posts';\nimport * as userService from './api/users';\nimport * as commentsService from './api/comments';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\ntype GlobalProps = {\n  users: User[];\n  setUsers: (u: User[]) => void;\n  comments: Comment[];\n  setComments: (c: Comment[]) => void;\n  userName: string;\n  setUserName: (str: string) => void;\n  posts: Post[];\n  setPosts: (p: Post[]) => void;\n  userId: number;\n  setUserId: (n: number) => void;\n  postId: number;\n  setPostId: (n: number) => void;\n  isLoadingPosts: boolean;\n  setIsLoadingPosts: (b: boolean) => void;\n  isVisibleError: boolean;\n  setIsVisibleError: (b: boolean) => void;\n  isLoadingComments: boolean;\n  setIsLoadingComments: (b: boolean) => void;\n  isErrorComments: boolean;\n  setIsErrorComments: (b: boolean) => void;\n};\n\nexport const GlobalContext = createContext<GlobalProps>({\n  users: [],\n  setUsers: () => { },\n  comments: [],\n  setComments: () => { },\n  userName: 'Choose a user',\n  setUserName: () => { },\n  posts: [],\n  setPosts: () => {},\n  userId: 0,\n  setUserId: () => {},\n  postId: 0,\n  setPostId: () => {},\n  isLoadingPosts: false,\n  setIsLoadingPosts: () => {},\n  isVisibleError: false,\n  setIsVisibleError: () => {},\n  isLoadingComments: false,\n  setIsLoadingComments: () => {},\n  isErrorComments: false,\n  setIsErrorComments: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const GlobalProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [userName, setUserName] = useState('Choose a user');\n  const [userId, setUserId] = useState(0);\n  const [postId, setPostId] = useState(0);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isVisibleError, setIsVisibleError] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isErrorComments, setIsErrorComments] = useState(false);\n\n  useEffect(() => {\n    userService.getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    postsService.getPosts(userId)\n      .then((newPosts) => {\n        setPosts(newPosts);\n        setIsVisibleError(false);\n      })\n      .catch(() => {\n        setIsVisibleError(true);\n        setPosts([]);\n      })\n      .finally(() => {\n        setIsLoadingPosts(false);\n      });\n  }, [userId]);\n\n  useEffect(() => {\n    commentsService.getComments(postId)\n      .then((newComments) => {\n        setComments(newComments);\n        setIsErrorComments(false);\n      })\n      .catch(() => {\n        setComments([]);\n        setIsErrorComments(true);\n      })\n      .finally(() => setIsLoadingComments(false));\n  }, [postId]);\n\n  return (\n    <GlobalContext.Provider value={{\n      users,\n      setUsers,\n      userName,\n      setUserName,\n      posts,\n      setPosts,\n      userId,\n      setUserId,\n      comments,\n      setComments,\n      postId,\n      setPostId,\n      isLoadingPosts,\n      setIsLoadingPosts,\n      isVisibleError,\n      setIsVisibleError,\n      isLoadingComments,\n      setIsLoadingComments,\n      isErrorComments,\n      setIsErrorComments,\n    }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const deletePost = (postId: number) => {\n  return client.delete(`/posts/${postId}`);\n};\n\nexport const createPost = ({ userId, title, body }: Omit<Post, 'id'>) => {\n  return client.post<Post>('/posts', { userId, title, body });\n};\n\nexport const updatePost = ({\n  id, userId, title, body,\n}: Post) => {\n  return client.patch<Post>(`/posts/${id}`, { userId, title, body });\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deletComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const creatComment = ({\n  postId, name, email, body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { GlobalContext } from '../GlobalContetxt';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostInfo: React.FC<Props> = ({ post }) => {\n  const { postId, setPostId, setIsLoadingComments } = useContext(GlobalContext);\n\n  const handleButtonClick = () => {\n    setPostId(post.id === postId ? 0 : post.id);\n    setIsLoadingComments(true);\n  };\n\n  return (\n    <tbody>\n      <tr data-cy=\"Post\">\n        <td data-cy=\"PostId\">\n          {post.id}\n        </td>\n\n        <td data-cy=\"PostTitle\">\n          {post.title}\n        </td>\n\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            type=\"button\"\n            data-cy=\"PostButton\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-light': postId !== post.id },\n            )}\n            onClick={handleButtonClick}\n          >\n            {postId === post.id\n              ? (\n                'Close'\n              ) : (\n                'Open'\n              )}\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  );\n};\n","import React, { useContext } from 'react';\nimport { GlobalContext } from '../GlobalContetxt';\nimport { PostInfo } from './PostInfo';\n\nexport const PostsList: React.FC = () => {\n  const { posts } = useContext(GlobalContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        {posts.map(post => (\n          <PostInfo post={post} key={post.id} />\n        ))}\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { GlobalContext } from '../GlobalContetxt';\nimport * as commentsService from '../api/comments';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    comments,\n    postId,\n    setComments,\n    setIsErrorComments,\n  } = useContext(GlobalContext);\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setEmailValue] = useState('');\n  const [bodyValue, setBodyValue] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isBodyError, setIsBodyError] = useState(false);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n\n  const handleClear = () => {\n    setNameValue('');\n    setEmailValue('');\n    setBodyValue('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsBodyError(false);\n  };\n\n  const handleAddComment = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    event.preventDefault();\n\n    setIsNameError(!nameValue);\n    setIsEmailError(!emailValue);\n    setIsBodyError(!bodyValue);\n    setIsLoadingButton(true);\n\n    if (!nameValue.trim() || !emailValue.trim() || !bodyValue.trim()) {\n      setIsLoadingButton(false);\n\n      return;\n    }\n\n    commentsService.creatComment({\n      postId,\n      name: nameValue,\n      email: emailValue,\n      body: bodyValue,\n    })\n      .then((newComment) => {\n        setComments([...comments, newComment]);\n        setBodyValue('');\n      })\n      .catch(() => {\n        setIsErrorComments(true);\n        setComments([]);\n      })\n      .finally(() => setIsLoadingButton(false));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={nameValue}\n            onChange={(event) => setNameValue(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={emailValue}\n            onChange={(event) => setEmailValue(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isBodyError },\n            )}\n            value={bodyValue}\n            onChange={(event) => setBodyValue(event.target.value)}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoadingButton },\n            )}\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { GlobalContext } from '../GlobalContetxt';\nimport * as commentsService from '../api/comments';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    posts,\n    postId,\n    comments,\n    isErrorComments,\n    isLoadingComments,\n    setIsErrorComments,\n    setComments,\n  } = useContext(GlobalContext);\n\n  const [createComment, setCreateComment] = useState(false);\n\n  const currentPost = posts.find(post => post.id === postId);\n\n  const handleDeleteComment = (id: number) => {\n    commentsService.deletComment(id)\n      .then(() => {\n        const updatedComments = comments.filter(c => c.id !== id);\n\n        setComments(updatedComments);\n      })\n      .catch(() => {\n        setIsErrorComments(true);\n        setComments([]);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${currentPost?.id}: ${currentPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (\n            <Loader />\n          )}\n\n          {isErrorComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length && !isErrorComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && !isErrorComments && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {comments.map(comment => (\n            <article className=\"message is-small\" data-cy=\"Comment\">\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleDeleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!createComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setCreateComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {createComment && (\n          <NewCommentForm />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { GlobalContext } from '../GlobalContetxt';\n\ntype Props = {\n  user: User;\n  setIsActiveDropdown: (b: boolean) => void;\n};\n\nexport const UserDetails: React.FC<Props> = ({\n  user,\n  setIsActiveDropdown = () => { },\n}) => {\n  const {\n    setUserName,\n    userId,\n    setUserId,\n    setIsLoadingPosts,\n    postId,\n    setComments,\n    setPostId,\n  } = useContext(GlobalContext);\n\n  const handleSelectUser = () => {\n    if (postId) {\n      setComments([]);\n      setPostId(0);\n    }\n\n    setUserName(user.name);\n    setIsActiveDropdown(false);\n    setUserId(user.id);\n    setIsLoadingPosts(true);\n  };\n\n  return (\n    <a\n      href={`#user-${user.id}`}\n      className={classNames(\n        'dropdown-item',\n        { 'is-active': user.id === userId },\n      )}\n      onClick={handleSelectUser}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport classNames from 'classnames';\nimport { GlobalContext } from '../GlobalContetxt';\nimport { UserDetails } from './UserDetails';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    userName,\n  } = useContext(GlobalContext);\n  const [isActiveDropdown, setIsActiveDropdown] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActiveDropdown },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActiveDropdown(!isActiveDropdown)}\n        >\n          <span>\n            {userName}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <UserDetails\n              user={user}\n              key={user.id}\n              setIsActiveDropdown={setIsActiveDropdown}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { GlobalContext } from './GlobalContetxt';\n\nexport const AppPosts: React.FC = () => {\n  const {\n    userId,\n    posts,\n    isLoadingPosts,\n    isVisibleError,\n    postId,\n  } = useContext(GlobalContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {isVisibleError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!!userId\n                && !posts.length\n                && !isLoadingPosts\n                && !isVisibleError\n                && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!userId && !!posts.length && !isLoadingPosts && (\n                  <PostsList />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!postId },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {!!postId && (\n                <PostDetails />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { AppPosts } from './AppPosts';\nimport { GlobalProvider } from './GlobalContetxt';\n\nexport const App = () => (\n  <GlobalProvider>\n    <AppPosts />\n  </GlobalProvider>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}